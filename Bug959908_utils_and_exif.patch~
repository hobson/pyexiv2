diff -ruB ../pyexiv2_oliver/src/pyexiv2/exif.py ./src/pyexiv2/exif.py
--- ../pyexiv2_oliver/src/pyexiv2/exif.py	2012-03-20 15:13:28.751210000 +0800
+++ ./src/pyexiv2/exif.py	2012-03-20 15:15:16.249687089 +0800
@@ -32,7 +32,8 @@
 
 from pyexiv2.utils import is_fraction, make_fraction, fraction_to_string, \
                           NotifyingList, ListenerInterface, \
-                          undefined_to_string, string_to_undefined, \
+                          undefined_to_human, string_to_undefined, \
+                          latin_to_ascii, escape_unprintable, \
                           DateTimeFormatter
 
 import time
@@ -286,6 +287,10 @@
             # There is currently no charset conversion.
             # TODO: guess the encoding and decode accordingly into unicode
             # where relevant.
+            try:
+                return value.decode('utf-8')
+            except UnicodeError:
+                return value
             return value
 
         elif self.type in ('Byte', 'SByte'):
@@ -330,7 +335,7 @@
             # There is currently no charset conversion.
             # TODO: guess the encoding and decode accordingly into unicode
             # where relevant.
-            return undefined_to_string(value)
+            return undefined_to_human(value)
 
         raise ExifValueError(value, self.type)
 
@@ -374,7 +379,10 @@
             elif isinstance(value, str):
                 return value
             else:
-                raise ExifValueError(value, self.type)
+                try:
+                    return(str(value))
+                except:
+                    raise ExifValueError(value, self.type)
 
         elif self.type == 'Comment':
             if value is not None and self.raw_value is not None and \
@@ -429,13 +437,19 @@
             if is_fraction(value) and value.numerator >= 0:
                 return fraction_to_string(value)
             else:
-                raise ExifValueError(value, self.type)
+                try:
+                    return(str(value))
+                except:
+                    raise ExifValueError(value, self.type)
 
         elif self.type == 'SRational':
             if is_fraction(value):
                 return fraction_to_string(value)
             else:
-                raise ExifValueError(value, self.type)
+                try:
+                    return(str(value))
+                except:
+                    raise ExifValueError(value, self.type)
 
         elif self.type == 'Undefined':
             if isinstance(value, unicode):
Only in ./src/pyexiv2: exif.py~
Only in ./src/pyexiv2: exif.pyc
Only in ./src/pyexiv2: hobs_utils.py
Only in ./src/pyexiv2: hobs_utils.py~
diff -ruB ../pyexiv2_oliver/src/pyexiv2/__init__.py ./src/pyexiv2/__init__.py
--- ../pyexiv2_oliver/src/pyexiv2/__init__.py	2012-03-20 15:13:28.751210000 +0800
+++ ./src/pyexiv2/__init__.py	2012-03-20 15:35:26.227687048 +0800
@@ -67,6 +67,7 @@
 from pyexiv2.preview import Preview
 from pyexiv2.utils import FixedOffset, Rational, NotifyingList, \
                           undefined_to_string, string_to_undefined, \
+                          undefined_to_human, \
                           GPSCoordinate
 
 
Only in ./src/pyexiv2: __init__.py~
Only in ./src/pyexiv2: __init__.py.~1~
Only in ./src/pyexiv2: __init__.pyc
Only in ./src/pyexiv2: iptc.pyc
Only in ./src/pyexiv2: metadata.pyc
Only in ./src/pyexiv2: preview.pyc
Only in ./src/pyexiv2: undefined_makernote_util.patch
diff -ruB ../pyexiv2_oliver/src/pyexiv2/utils.py ./src/pyexiv2/utils.py
--- ../pyexiv2_oliver/src/pyexiv2/utils.py	2012-03-20 15:13:28.751210000 +0800
+++ ./src/pyexiv2/utils.py	2012-03-20 15:14:57.029591782 +0800
@@ -21,6 +21,7 @@
 # Foundation, Inc., 51 Franklin Street, 5th Floor, Boston, MA 02110-1301 USA.
 #
 # Author: Olivier Tilloy <olivier@tilloy.net>
+# Contributors: Hobson Lane <hobson@totalgood.com>
 #
 # ******************************************************************************
 
@@ -133,6 +134,61 @@
         return (self.sign == other.sign) and (self.hours == other.hours) and \
             (self.minutes == other.minutes)
 
+def latin_to_ascii(s):
+    s2=''
+    for c in s:
+        if ord(c) < 128:
+            s2 += c
+        else:
+            s2 += '\\x'+hex(ord(c))[2:].zfill(2) 
+    return s2
+
+# from string.printable
+PRINTABLE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
+def escape_unprintable(s):
+    s2=''
+    for c in s:
+        if ord(c) < 128 and c in PRINTABLE:
+            s2 += c
+        else:
+            s2 += '\\x'+hex(ord(c))[2:].zfill(2) 
+    return s2
+
+def try_int(s):
+    try:
+        return int(s)
+    except ValueError:
+        return False # return 0
+
+def undefined_to_human(undefined):
+    """
+    Convert an exif.Undefined type string to a human-readable string.
+    
+    The "Undefined" string of space-delimitted decimal integers is converted to 
+    ASCII characters and backslash-escaped hex codes for humans.
+    The undefined string must contain space-delimmetted decimal numbers,
+    e.g. "48 50 50 49" becomes "0221".
+    
+    The Undefined type is part of the EXIF specification.
+    
+    Examples:
+    >>> undefined_to_human("48 50 50 49")
+    '0221'
+    >>> maker_note = '70 85 74 73 70 73 76 77 13 10 32 32 32 32 0 0 0 30 0 0 0 7 0'
+    >>> undefined_to_human(maker_note)
+    'FUJIFILM\r\n    \x00\x00\x00\x1e\x00\x00\x00\x07\x00'
+    >>> print escape_unprintable(undefined_to_human(latin_to_ascii(maker_note)))
+    FUJIFILM
+    \x00\x00\x00\x1e\x00\x00\x00\x07\x00
+    
+    :param undefined: an exif Undefined string
+    :type undefined: string
+    :return: decoded (human-readable) python string
+    :rtype: string
+    """
+    if undefined == '':
+        return ''
+    return escape_unprintable(undefined_to_string(latin_to_ascii(undefined)))
 
 def undefined_to_string(undefined):
     """
Only in ./src/pyexiv2: utils.py~
Only in ./src/pyexiv2: utils.pyc
Only in ./src/pyexiv2: utils.py.HOBSDIRTY
Only in ./src/pyexiv2: xmp.pyc
